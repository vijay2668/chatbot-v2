generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique

  user_key String?

  // daily_messages_limit Int //daily messages limit will be 30

  chatbots Chatbot[]
  // threads  Thread[]

  createdAt DateTime @default(now())
}

model Chatbot {
  id                              String  @id @default(auto()) @map("_id") @db.ObjectId
  bot_id                          String
  bot_name                        String
  company_name                    String
  description                     String?
  company_logo                    String
  bot_avatar                      String
  chat_bubble_icon                String
  accent_colour                   String
  subheading                      String
  welcome_message                 String
  input_box_placeholder           String
  botsonic_branding_on_the_widget String
  widget_position                 String
  show_sources_with_the_response  String
  post_chat_feedback              String
  widget                          String
  show_floating_welcome_message   Boolean
  show_floating_starter_questions Boolean

  bot_template                   String
  response_length                String
  // multilingual_support           Boolean
  // multilingual_language          String
  is_gpt_4                       Boolean
  bot_guidelines                 String
  messages_limit_per_day         Int
  messages_limit_warning_message String
  messages_used                  Int
  show_user_form                 Boolean
  files_not_uploaded_message     String

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  threads           Thread[]
  fields            Field[]
  faqs              FAQ[]
  starter_questions SQ[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model Field {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  label       String
  type        String
  placeholder String
  is_required Boolean

  chatbotId String  @db.ObjectId
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatbotId])
}

model FAQ {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question String
  answer   String

  chatbotId String  @db.ObjectId
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatbotId])
}

model SQ {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question String
  answer   String

  chatbotId String  @db.ObjectId
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatbotId])
}

model Thread {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  thread_id String

  chatbotId String  @db.ObjectId
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  // profileId String  @db.ObjectId
  // profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // num_messages Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@index([profileId])

  @@index([chatbotId])
}
